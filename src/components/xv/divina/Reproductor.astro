---
import Mp3Icon from "../../../assets/icons/mp3Icon.astro";
const { colorPrimario } = Astro.props;
---

<!-- Music Player Floating Button -->
<div class="fixed bottom-6 right-6 z-50" data-aos="fade-up" data-aos-delay="1000">
  <div class="relative group">
    <!-- Main Play/Pause Button -->
    <button
      id="playButton"
      class="flex items-center justify-center w-16 h-16 text-white rounded-full shadow-xl transition-all duration-300 hover:shadow-2xl hover:scale-110 focus:outline-none focus:ring-4 focus:ring-opacity-50 active:scale-95"
      style={`background-color: ${colorPrimario}; box-shadow: 0 10px 30px ${colorPrimario}40; focus-ring-color: ${colorPrimario}`}
      aria-label="Reproducir mÃºsica de fondo"
      title="Reproducir mÃºsica"
    >
      <!-- Play Icon (visible when paused) -->
      <svg 
        id="playIcon" 
        class="w-8 h-8 ml-1 transition-opacity duration-300" 
        fill="currentColor" 
        viewBox="0 0 24 24"
      >
        <path d="M8 5v14l11-7z"/>
      </svg>
      
      <!-- Pause Icon (hidden when paused) -->
      <svg 
        id="pauseIcon" 
        class="w-8 h-8 hidden transition-opacity duration-300" 
        fill="currentColor" 
        viewBox="0 0 24 24"
      >
        <path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"/>
      </svg>
      
      <!-- Loading Spinner (hidden by default) -->
      <div id="loadingSpinner" class="hidden w-8 h-8">
        <div class="animate-spin rounded-full border-2 border-white border-t-transparent w-full h-full"></div>
      </div>
    </button>

    <!-- Pulse Animation Ring (when playing) -->
    <div 
      id="pulseRing"
      class="absolute inset-0 rounded-full opacity-0 transition-opacity duration-300 pointer-events-none"
      style={`background-color: ${colorPrimario}; animation: pulse 2s infinite`}
    ></div>

    <!-- Volume Control (appears on hover) -->
    <div 
      id="volumeControl"
      class="absolute bottom-full right-0 mb-3 opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-y-2 group-hover:translate-y-0"
    >
      <div 
        class="bg-white rounded-lg shadow-lg p-3 min-w-[120px]"
        style={`border-left: 3px solid ${colorPrimario}`}
      >
        <div class="flex items-center gap-2 mb-2">
          <svg class="w-4 h-4 text-gray-600" fill="currentColor" viewBox="0 0 24 24">
            <path d="M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z"/>
          </svg>
          <span class="text-sm text-gray-700 font-medium">Volumen</span>
        </div>
        <input
          type="range"
          id="volumeSlider"
          min="0"
          max="1"
          step="0.1"
          value="0.7"
          class="w-full h-2 rounded-lg appearance-none cursor-pointer"
          style={`background: linear-gradient(to right, ${colorPrimario} 0%, ${colorPrimario} 70%, #e5e5e5 70%, #e5e5e5 100%);`}
        >
      </div>
    </div>

    <!-- Song Title (appears when playing) -->
    <div 
      id="songInfo"
      class="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-3 opacity-0 transition-all duration-300 whitespace-nowrap"
    >
      <div 
        class="bg-white rounded-lg shadow-lg px-4 py-2"
        style={`border-top: 3px solid ${colorPrimario}`}
      >
        <p class="text-sm font-medium text-gray-800">ðŸŽµ MÃºsica de fondo</p>
      </div>
    </div>
  </div>
</div>

<audio id="audio" src="/cancion.mp3" preload="auto" loop></audio>

<style>
  /* Custom volume slider styling */
  #volumeSlider::-webkit-slider-thumb {
    appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--color-primario);
    cursor: pointer;
    box-shadow: 0 2px 6px rgba(0,0,0,0.2);
    transition: all 0.2s ease;
  }

  #volumeSlider::-webkit-slider-thumb:hover {
    transform: scale(1.2);
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
  }

  #volumeSlider::-moz-range-thumb {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: var(--color-primario);
    cursor: pointer;
    border: none;
    box-shadow: 0 2px 6px rgba(0,0,0,0.2);
  }

  /* Pulse animation for playing state */
  @keyframes pulse {
    0% {
      transform: scale(1);
      opacity: 0.3;
    }
    50% {
      transform: scale(1.2);
      opacity: 0.1;
    }
    100% {
      transform: scale(1.4);
      opacity: 0;
    }
  }

  /* Volume control hover animation */
  .group:hover #volumeControl {
    animation: fadeInUp 0.3s ease-out forwards;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script define:vars={{ colorPrimario }} client:load>
  const playButton = document.getElementById("playButton");
  const audio = document.getElementById("audio");
  const playIcon = document.getElementById("playIcon");
  const pauseIcon = document.getElementById("pauseIcon");
  const loadingSpinner = document.getElementById("loadingSpinner");
  const pulseRing = document.getElementById("pulseRing");
  const volumeSlider = document.getElementById("volumeSlider");
  const songInfo = document.getElementById("songInfo");

  let isPlaying = false;
  let isLoading = false;

  // Set initial volume
  if (audio) {
    audio.volume = 0.7;
    
    // Update volume slider background color
    const slider = document.getElementById('volumeSlider');
    if (slider) {
      document.documentElement.style.setProperty('--color-primario', colorPrimario);
    }
  }

  // Toggle play/pause
  playButton?.addEventListener("click", async () => {
    if (isLoading) return;
    
    try {
      if (isPlaying) {
        audio.pause();
      } else {
        setLoadingState(true);
        await audio.play();
      }
    } catch (error) {
      console.warn("Error playing audio:", error);
      setLoadingState(false);
    }
  });

  // Audio event listeners
  audio?.addEventListener("play", () => {
    setPlayingState(true);
    setLoadingState(false);
  });

  audio?.addEventListener("pause", () => {
    setPlayingState(false);
  });

  audio?.addEventListener("ended", () => {
    setPlayingState(false);
  });

  audio?.addEventListener("loadstart", () => {
    if (isPlaying) setLoadingState(true);
  });

  audio?.addEventListener("canplay", () => {
    setLoadingState(false);
  });

  // Volume control
  volumeSlider?.addEventListener("input", (e) => {
    const volume = parseFloat(e.target.value);
    if (audio) {
      audio.volume = volume;
    }
    
    // Update slider background
    const percentage = volume * 100;
    e.target.style.background = `linear-gradient(to right, ${colorPrimario} 0%, ${colorPrimario} ${percentage}%, #e5e5e5 ${percentage}%, #e5e5e5 100%)`;
  });

  // Functions
  function setPlayingState(playing) {
    isPlaying = playing;
    
    if (playing) {
      playIcon?.classList.add("hidden");
      pauseIcon?.classList.remove("hidden");
      pulseRing?.classList.remove("opacity-0");
      pulseRing?.classList.add("opacity-30");
      songInfo?.classList.remove("opacity-0");
      songInfo?.classList.add("opacity-100");
      playButton?.setAttribute("aria-label", "Pausar mÃºsica de fondo");
      playButton?.setAttribute("title", "Pausar mÃºsica");
    } else {
      playIcon?.classList.remove("hidden");
      pauseIcon?.classList.add("hidden");
      pulseRing?.classList.add("opacity-0");
      pulseRing?.classList.remove("opacity-30");
      songInfo?.classList.add("opacity-0");
      songInfo?.classList.remove("opacity-100");
      playButton?.setAttribute("aria-label", "Reproducir mÃºsica de fondo");
      playButton?.setAttribute("title", "Reproducir mÃºsica");
    }
  }

  function setLoadingState(loading) {
    isLoading = loading;
    
    if (loading) {
      playIcon?.classList.add("hidden");
      pauseIcon?.classList.add("hidden");
      loadingSpinner?.classList.remove("hidden");
    } else {
      loadingSpinner?.classList.add("hidden");
      if (isPlaying) {
        pauseIcon?.classList.remove("hidden");
      } else {
        playIcon?.classList.remove("hidden");
      }
    }
  }

  // Keyboard accessibility
  document.addEventListener("keydown", (e) => {
    // Space bar to toggle play/pause when not focused on other interactive elements
    if (e.code === "Space" && !["INPUT", "BUTTON", "TEXTAREA"].includes(e.target.tagName)) {
      e.preventDefault();
      playButton?.click();
    }
  });
</script>
